// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: player.proto

package player

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerClient interface {
	PlaySong(ctx context.Context, in *PlaySongRequest, opts ...grpc.CallOption) (*PlaySongResponse, error)
	PauseSong(ctx context.Context, in *PauseSongRequest, opts ...grpc.CallOption) (*PauseSongResponse, error)
	DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error)
	AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error)
	ShowSongs(ctx context.Context, in *ShowSongsRequest, opts ...grpc.CallOption) (*ShowSongsResponse, error)
	StopPlay(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	GetCurrentSong(ctx context.Context, in *GetCurrentSongRequest, opts ...grpc.CallOption) (*GetCurrentSongResponse, error)
}

type playerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerClient(cc grpc.ClientConnInterface) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) PlaySong(ctx context.Context, in *PlaySongRequest, opts ...grpc.CallOption) (*PlaySongResponse, error) {
	out := new(PlaySongResponse)
	err := c.cc.Invoke(ctx, "/player.Player/PlaySong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) PauseSong(ctx context.Context, in *PauseSongRequest, opts ...grpc.CallOption) (*PauseSongResponse, error) {
	out := new(PauseSongResponse)
	err := c.cc.Invoke(ctx, "/player.Player/PauseSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) DeleteSong(ctx context.Context, in *DeleteSongRequest, opts ...grpc.CallOption) (*DeleteSongResponse, error) {
	out := new(DeleteSongResponse)
	err := c.cc.Invoke(ctx, "/player.Player/DeleteSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) AddSong(ctx context.Context, in *AddSongRequest, opts ...grpc.CallOption) (*AddSongResponse, error) {
	out := new(AddSongResponse)
	err := c.cc.Invoke(ctx, "/player.Player/AddSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) ShowSongs(ctx context.Context, in *ShowSongsRequest, opts ...grpc.CallOption) (*ShowSongsResponse, error) {
	out := new(ShowSongsResponse)
	err := c.cc.Invoke(ctx, "/player.Player/ShowSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) StopPlay(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/player.Player/StopPlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetCurrentSong(ctx context.Context, in *GetCurrentSongRequest, opts ...grpc.CallOption) (*GetCurrentSongResponse, error) {
	out := new(GetCurrentSongResponse)
	err := c.cc.Invoke(ctx, "/player.Player/GetCurrentSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServer is the server API for Player service.
// All implementations must embed UnimplementedPlayerServer
// for forward compatibility
type PlayerServer interface {
	PlaySong(context.Context, *PlaySongRequest) (*PlaySongResponse, error)
	PauseSong(context.Context, *PauseSongRequest) (*PauseSongResponse, error)
	DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error)
	AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error)
	ShowSongs(context.Context, *ShowSongsRequest) (*ShowSongsResponse, error)
	StopPlay(context.Context, *StopRequest) (*StopResponse, error)
	GetCurrentSong(context.Context, *GetCurrentSongRequest) (*GetCurrentSongResponse, error)
	mustEmbedUnimplementedPlayerServer()
}

// UnimplementedPlayerServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerServer struct {
}

func (UnimplementedPlayerServer) PlaySong(context.Context, *PlaySongRequest) (*PlaySongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaySong not implemented")
}
func (UnimplementedPlayerServer) PauseSong(context.Context, *PauseSongRequest) (*PauseSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSong not implemented")
}
func (UnimplementedPlayerServer) DeleteSong(context.Context, *DeleteSongRequest) (*DeleteSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedPlayerServer) AddSong(context.Context, *AddSongRequest) (*AddSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedPlayerServer) ShowSongs(context.Context, *ShowSongsRequest) (*ShowSongsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSongs not implemented")
}
func (UnimplementedPlayerServer) StopPlay(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPlay not implemented")
}
func (UnimplementedPlayerServer) GetCurrentSong(context.Context, *GetCurrentSongRequest) (*GetCurrentSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSong not implemented")
}
func (UnimplementedPlayerServer) mustEmbedUnimplementedPlayerServer() {}

// UnsafePlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServer will
// result in compilation errors.
type UnsafePlayerServer interface {
	mustEmbedUnimplementedPlayerServer()
}

func RegisterPlayerServer(s grpc.ServiceRegistrar, srv PlayerServer) {
	s.RegisterService(&Player_ServiceDesc, srv)
}

func _Player_PlaySong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaySongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).PlaySong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/PlaySong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).PlaySong(ctx, req.(*PlaySongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_PauseSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).PauseSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/PauseSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).PauseSong(ctx, req.(*PauseSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/DeleteSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).DeleteSong(ctx, req.(*DeleteSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/AddSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).AddSong(ctx, req.(*AddSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_ShowSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSongsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).ShowSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/ShowSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).ShowSongs(ctx, req.(*ShowSongsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_StopPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).StopPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/StopPlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).StopPlay(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetCurrentSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetCurrentSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.Player/GetCurrentSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetCurrentSong(ctx, req.(*GetCurrentSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Player_ServiceDesc is the grpc.ServiceDesc for Player service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Player_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "player.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaySong",
			Handler:    _Player_PlaySong_Handler,
		},
		{
			MethodName: "PauseSong",
			Handler:    _Player_PauseSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _Player_DeleteSong_Handler,
		},
		{
			MethodName: "AddSong",
			Handler:    _Player_AddSong_Handler,
		},
		{
			MethodName: "ShowSongs",
			Handler:    _Player_ShowSongs_Handler,
		},
		{
			MethodName: "StopPlay",
			Handler:    _Player_StopPlay_Handler,
		},
		{
			MethodName: "GetCurrentSong",
			Handler:    _Player_GetCurrentSong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}
